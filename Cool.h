//
// Created by vetinari on 26.11.20.
//


#ifndef DIP_Cool_H
#define DIP_Cool_H

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cfloat>
#include <cmath>
#include <cassert>
#include <vector>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <bitset>
#include "Point.h"
#include "Simplex.h"
#include "Const.h"


class Cool {
    /**
     * This is the main object for reading and interpolating cooling data.
     * Start by reading in the .points, .tris, and .neighbors files generated by CHIPS using read_files(). Then
     * construct the ball tree using construct_btree(). The object is then ready for interpolation using the
     * interpolate() method.
     * In general, coordinates (e.g. to interpolate) are passed as pointers to arrays. These arrays need to have correct
     * length (matching dimension D) and contain the coordinates in the same order as the CHIPS data files.
     * If you want to read in new data, but don't want to allocate a new Cool object, you can use reset().
     *
     * Make sure to allocate Cool objets on the heap, otherwise the size of the points and simplices attributes will
     * lead to a stack overflow.
     */
private:
    Point points[DIP_NMAX];
    Simplex simplices[DIP_SMAX];
    Simplex * btree;         // Points to the root of the simplex ball tree

    Simplex * construct_simplex_btree_recursive(Simplex **, int);
    Simplex * find_nearest_neighbor_sbtree(Simplex *, const double *, Simplex *, double);

    int N_LIM, S_LIM;
public:
    Cool() {
        flips = 0;
        interpolate_calls = 0;
        nullpointers_encountered = 0;
        avg_flips = 0;
        S_LIM = DIP_SMAX;
        N_LIM = DIP_NMAX;
        for (int i = 0; i < D; i++) {
            mins[i] = DBL_MAX;
            maxs[i] = -1 * DBL_MAX;
        }
    };
    double avg_flips;
    double quality_avg = 0;
    double quality_stdev = 0;
    double M2_quality = 0;
    int q_count = 0;
    int flips, interpolate_calls;
    int nullpointers_encountered;

    // Minimum and maximum values in each dimension TODO private?
    double mins[D];
    double maxs[D];

    int clamp_flag;
    double CLAMP_MIN[D], CLAMP_MAX[D];

    void reset();

    void set_clamp_values(double * mins, double * maxs);

    int read_files(std::string, std::string, std::string);
    void save_btree(std::string filename);
    int construct_btree();
    double * interpolate(double * coords);
};



#endif //DIP_Cool_H